# -*- coding: utf-8 -*-
"""computer_vision_CNN_main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mlDihtyI6b8UojarlXMuFmjuUNTYJ-pi
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator as IDG
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import zipfile
import os
import pathlib

!wget https://storage.googleapis.com/ztm_tf_course/food_vision/pizza_steak.zip

zip_ref=zipfile.ZipFile("pizza_steak.zip")
zip_ref.extractall()
zip_ref.close()

!ls pizza_steak

!ls pizza_steak/train/pizza

for path,names,filenames in os.walk("pizza_steak"):
  print(f" their are {len(names)} directories and {len(filenames)} images in {path}")

num_steak_images_train=len(os.listdir("pizza_steak/train/steak"))

num_steak_images_train

data_dir=pathlib.Path("pizza_steak/train")
class_names = np.array(sorted([item.name for item in data_dir.glob('*')])) # created a list of class_names from the subdirectories
class_names

def view_random_image(target_dir,target_class):

  target_folder=target_dir+'/'+target_class

  random_image=random.sample(os.listdir(target_folder),1)
  print(random_image[0])

  img=mpimg.imread(target_folder+'/'+random_image[0])
  plt.imshow(img)
  plt.title(target_class)
  plt.axis("off")

  print(f"image shape {img.shape}")

  return img

img = view_random_image("pizza_steak/train","steak")

tf.constant(img)

tf.random.set_seed(42)

# data augmented
train_datagen=IDG(rescale=1/255.,
                  rotation_range=0.2,
                  shear_range=0.2,
                  zoom_range=0.2,
                  width_shift_range=0.2,
                  height_shift_range=0.3,
                  horizontal_flip=True)


valid_datagen=IDG(rescale=1/255.)

train_dir='/content/pizza_steak/train'
test_dir='/content/pizza_steak/test'

train_data=train_datagen.flow_from_directory(directory=train_dir,
                                             batch_size=32,
                                             target_size=(224,224),
                                             class_mode="binary",
                                             seed=42
                                             )

valid_data=valid_datagen.flow_from_directory(directory=test_dir,
                                             batch_size=32,
                                             target_size=(224,224),
                                             class_mode="binary",
                                             seed=42
                                             )

# 47 batches of 32 images , 47*32=1500

images,labels=next(train_data)

r=random.randint(0,32)
print(r)
plt.imshow(images[r])

model=tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(filters=30,kernel_size=3,activation="relu",
                           input_shape=(224,224,3)),
    tf.keras.layers.Conv2D(30,3,activation="relu"),

    tf.keras.layers.MaxPool2D(pool_size=3,padding="valid"),

    tf.keras.layers.Conv2D(30,3,activation="relu"),
    tf.keras.layers.Conv2D(30,3,activation="relu"),

    tf.keras.layers.MaxPool2D(pool_size=3),

    tf.keras.layers.Conv2D(30,3,activation="relu"),
    tf.keras.layers.Conv2D(30,3,activation="relu"),

    tf.keras.layers.MaxPool2D(pool_size=3),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(1,activation="sigmoid")


])

model.compile(loss="binary_crossentropy",
              optimizer=tf.keras.optimizers.Adam(),
              metrics=["accuracy"])




hist_1=model.fit(train_data,
          epochs=6,
          steps_per_epoch=len(train_data),
          validation_data=valid_data,
          validation_steps=len(valid_data))

model.summary()

tf.random.set_seed(42)

model_2=tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(224,224,3)),
    tf.keras.layers.Dense(100,activation="relu"),
    tf.keras.layers.Dense(100,activation="relu"),
    tf.keras.layers.Dense(100,activation="relu"),
    tf.keras.layers.Dense(1,activation="sigmoid")
])


model_2.compile(loss="binary_crossentropy",
                optimizer=tf.keras.optimizers.Adam(),
                metrics=["accuracy"])


hist_2=model_2.fit(train_data,
          epochs=5,
          steps_per_epoch=len(train_data),
          validation_data=valid_data,
          validation_steps=len(valid_data))

model_2.summary()

pd.DataFrame(hist_1.history).plot()
pd.DataFrame(hist_2.history).plot()

!nvidia-smi

def plot_loss_curves(history):

  loss=history.history['loss']
  val_loss=history.history['val_loss']

  acc=history.history['accuracy']
  val_acc=history.history['val_accuracy']

  epochs=range(len(history.history['loss']))

  plt.plot(epochs,loss,label="training loss")
  plt.plot(epochs,val_loss,label="val_loss")
  plt.title('loss')
  plt.xlabel("epochs")
  plt.legend()

  plt.figure()
  plt.plot(epochs,acc,label="training acc")
  plt.plot(epochs,val_acc,label="val_acc")
  plt.title('acc')
  plt.xlabel("epochs")
  plt.legend()

plot_loss_curves(hist_1)

!wget https://github.com/mrdbourke/tensorflow-deep-learning/blob/main/images/03-steak.jpeg?raw=true
steak=mpimg.imread("03-steak.jpeg?raw=true")

plt.imshow(steak)
plt.axis=False

steak.shape

def load_prep(filename,img_shape=224):

  img=tf.io.read_file(filename)

  img=tf.image.decode_image(img)

  img=tf.image.resize(img,size=[img_shape,img_shape])

  img=img/255.

  return img

steak=load_prep('03-steak.jpeg?raw=true')
plt.imshow(steak)

pred=model.predict(tf.expand_dims(steak,axis=0))
pred

class_names

pred_class=class_names[int(tf.round(pred))]
pred_class

!wget https://product-assets.faasos.io/eatsure/production/mutton-pizza-online.jpeg

mystery=load_prep('mutton-pizza-online.jpeg')
plt.imshow(mystery)
pred=model.predict(tf.expand_dims(mystery,axis=0))
pred_class=class_names[int(tf.round(pred))]
pred_class

def pred_and_plot(model,filename,class_names=class_names):

  img=load_prep(filename)

  pred=model.predict(tf.expand_dims(img,axis=0))

  pred_class=class_names[int(tf.round(pred))]

  plt.imshow(img)
  plt.title(f"prediction {pred_class}")

pred_and_plot(model,'mutton-pizza-online.jpeg')